// -------------------------------------------------------------------------

import java.util.Arrays;

/**
 *  This class contains static methods that implementing sorting of an array of numbers
 *  using different sort algorithms.
 *
 *  @author Colin Redmond 18319775
 *  @version HT 2020
 */

class SortComparison {

    /**
     * Sorts an array of doubles using InsertionSort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order.
     *
     */
    static double [] insertionSort (double a[]){
        int i =0;
        double temp;
        while( i < a.length) {
            int j = i;
            while(j > 0 && a[j-1] > a[j]) {
                temp = a[j];
                a[j] = a[j-1];
                a[j-1] = temp;
                j = j - 1;
            }
            i = i + 1;
        }
        return a;
    }

    /**
     * Sorts an array of doubles using Selection Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] selectionSort (double a[]){

        int i =0;

        while (i < a.length) {
            int j = i;
            double lowest = Double.MAX_VALUE;
            while(j < a.length) {
                if(a[j] < lowest) lowest = a[j];
                j++;
            }
            a[i] = lowest;
            i++;
        }

        return a;

    }

    /**
     * Sorts an array of doubles using Quick Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */

   static double [] quickSort(double a[])
    {
        int low = 0,hi = a.length-1,partition;

        if (low < hi)
        {
            partition = partition(a, low, hi);

            quickSort(Arrays.copyOfRange(a,low,partition-1));  // Before partition
            quickSort(Arrays.copyOfRange(a,partition+1,hi)); // After partition
        }

        return a;
    }

    static int partition(double a[], int low, int hi){
        double pivot = a[hi];

        int i = low-1;

        for(int j = low; j <= hi-1; j++){

            if(a[j] < pivot){
                i++;
                double temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }

        }

        a[hi] = a[i+1];
        a[i+1] = pivot;

        return i+1;
    }


    /**
     * Sorts an array of doubles using Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    /**
     * Sorts an array of doubles using iterative implementation of Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     *
     * @param a: An unsorted array of doubles.
     * @return after the method returns, the array must be in ascending sorted order.
     */

    static double[] mergeSortIterative (double a[]) {
        int l = 0;
        int r = a.length-1;
        if (l < r)
        {
            int m = l+(r-l)/2; //Same as (l+r)/2 but avoids overflow for large l & h
            mergeSortIterative(Arrays.copyOfRange(a,0,m));
            mergeSortIterative(Arrays.copyOfRange(a,m+1,r));
            mergeI(a, l, m, r);
        }
        return a;
    }

    static void mergeI(double arr[], int l, int m, int r)
    {
        int i, j, k;
        int n1 = m - l + 1;
        int n2 =  r - m;

        /* create temp arrays */
        double[] L = new double[n1];
        double[] R = new double[n2];

        /* Copy data to temp arrays L[] and R[] */
        for (i = 0; i < n1; i++)
            L[i] = arr[l + i];
        for (j = 0; j < n2; j++)
            R[j] = arr[m + 1+ j];

        /* Merge the temp arrays back into arr[l..r]*/
        i = 0;
        j = 0;
        k = l;
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        /* Copy the remaining elements of L[], if there are any */
        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }

        /* Copy the remaining elements of R[], if there are any */
        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    /**
             * Sorts an array of doubles using recursive implementation of Merge Sort.
             * This method is static, thus it can be called as SortComparison.sort(a)
             *
             * @param a: An unsorted array of doubles.
             * @return after the method returns, the array must be in ascending sorted order.
             */
    static double[] mergeSortRecursive (double a[]) {

        int l = 0;
        int r = a.length-1;

        if (l < r)
        {
            // Find the middle point
            int m = (l+r)/2;

            // Sort first and second halves
            mergeSortRecursive(Arrays.copyOfRange(a,0,m));
            mergeSortRecursive(Arrays.copyOfRange(a,m+1,r));

            // Merge the sorted halves
            merge(a, l, m, r);
        }

        return a;

    }


    public static void merge(double a[], int l, int m, int r) {

        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;

        /* Create temp arrays */
        double L[] = new double[n1];
        double R[] = new double [n2];

        for (int i=0; i<n1; ++i)
            L[i] = a[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = a[m + 1+ j];

        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                a[k] = L[i];
                i++;
            }
            else
            {
                a[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1)
        {
            a[k] = L[i];
            i++;
            k++;
        }
        while (j < n2)
        {
            a[k] = R[j];
            j++;
            k++;
        }
    }




    public static void main(String[] args) {

        //todo: do experiments as per assignment instructions
    }

}//end class
