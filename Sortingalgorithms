// -------------------------------------------------------------------------

/**
 *  This class contains static methods that implementing sorting of an array of numbers
 *  using different sort algorithms.
 *
 *  @author Colin Redmond 18319775
 *  @version HT 2020
 */

 class SortComparison {

    /**
     * Sorts an array of doubles using InsertionSort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order.
     * 
     */
    static double [] insertionSort (double a[]){
    	int i =0;
    	double temp;
    	while( i < a.length) {
    	    int j = i;
    	    while(j > 0 && a[j-1] > a[j]) {
    	        temp = a[j];
    	        a[j] = a[j-1];
    	        a[j-1] = temp;
    	        j = j - 1;
    	    }
    	    i = i + 1;
    	}
    	return a;
    }
	
	    /**
     * Sorts an array of doubles using Selection Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] selectionSort (double a[]){
    	
    	int i =0;
    	
    	while (i < a.length) {
    		int j = i;
    		double lowest = Double.MAX_VALUE;
    		while(j < a.length) {
    			if(a[j] < lowest) lowest = a[j];
    			j++;
    		}
    		a[i] = lowest;
    		i++;
    	}
    	
    	return a;

    }

    /**
     * Sorts an array of doubles using Quick Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] quickSort (double a[]){
    	
    	int pivot = 0,i = 0,j = 0;
    	double hi,lo;
    	
    	while( i < j) {
    		
    		if(a[i] > pivot && a[j] < pivot) {
    			
    			double temp = a[i];
    			a[i] = a[j];
    			a[j] = temp;
    			
    			
    		}
    		
    	}
    	
    	return null;
    }
    
    static 
    

    /**
     * Sorts an array of doubles using Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    /**
     * Sorts an array of doubles using iterative implementation of Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     *
     * @param a: An unsorted array of doubles.
     * @return after the method returns, the array must be in ascending sorted order.
     */

    static double[] mergeSortIterative (double a[]) {
    	return null;
		 //todo: implement the sort
	
    }//end mergesortIterative
    
    
    
    /**
     * Sorts an array of doubles using recursive implementation of Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     *
     * @param a: An unsorted array of doubles.
     * @return after the method returns, the array must be in ascending sorted order.
     */
    static double[] mergeSortRecursive (double a[]) {
    	
    	return null;
    	//todo: implement the sort
	
   }//end mergeSortRecursive
    	
    


   


    public static void main(String[] args) {

        //todo: do experiments as per assignment instructions
    }

 }//end class
