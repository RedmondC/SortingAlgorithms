// -------------------------------------------------------------------------

import java.util.Arrays;

/**
 *  This class contains static methods that implementing sorting of an array of numbers
 *  using different sort algorithms.
 *
 *  @author Colin Redmond 18319775
 *  @version HT 2020
 */

class SortComparison {

    /**
     * Sorts an array of doubles using InsertionSort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order.
     *
     */
    static double [] insertionSort (double a[]){
    	if(a == null) 
        { 
            return null; 
        } 
        int i =0;
        double temp;
        while( i < a.length) {
            int j = i;
            while(j > 0 && a[j-1] > a[j]) {
                temp = a[j];
                a[j] = a[j-1];
                a[j-1] = temp;
                j = j - 1;
            }
            i = i + 1;
        }
        return a;
    }

    /**
     * Sorts an array of doubles using Selection Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] selectionSort (double a[]){

    	if(a == null) 
        { 
            return null; 
        } 
            int n = a.length; 
      
            for (int i = 0; i < n-1; i++) 
            { 

                int min = i; 
                for (int j = i+1; j < n; j++) 
                    if (a[j] < a[min]) 
                        min = j; 

                double temp = a[min]; 
                a[min] = a[i]; 
                a[i] = temp; 
            } 
        
            return a;

    }
    

    /**
     * Sorts an array of doubles using Quick Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */

   static double [] quickSort(double a[])
    {
	   if(a == null) 
       { 
           return null; 
       } 
        quickSort(a,0,a.length-1);
        
        return  a;
    }

   static void quickSort(double a[], int low, int high) 
   { 
       if (low < high) 
       { 
           int pi = partition(a, low, high); 
 
           quickSort(a, low, pi-1); 
           quickSort(a, pi+1, high); 
       } 
   } 
   
    static int partition(double a[], int low, int hi){
        double pivot = a[hi];

        int i = low-1;

        for(int j = low; j <= hi-1; j++){

            if(a[j] < pivot){
                i++;
                double temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }

        }

        a[hi] = a[i+1];
        a[i+1] = pivot;

        return i+1;
    }


    /**
     * Sorts an array of doubles using Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    /**
     * Sorts an array of doubles using iterative implementation of Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     *
     * @param a: An unsorted array of doubles.
     * @return after the method returns, the array must be in ascending sorted order.
     */
    
    public static double[] mergeSortIterative(double[] a) 
    { 
        if(a == null) 
        { 
            return null; 
        } 
  
        if(a.length > 1) 
        { 
            int mid = a.length / 2; 
  
            // Split left part 
            double[] left = new double[mid]; 
            for(int i = 0; i < mid; i++) 
            { 
                left[i] = a[i]; 
            } 
              
            // Split right part 
            double[] right = new double[a.length - mid]; 
            for(int i = mid; i < a.length; i++) 
            { 
                right[i - mid] = a[i]; 
            } 
            mergeSortIterative(left); 
            mergeSortIterative(right); 
  
            int i = 0; 
            int j = 0; 
            int k = 0; 
  
            // Merge left and right arrays 
            while(i < left.length && j < right.length) 
            { 
                if(left[i] < right[j]) 
                { 
                    a[k] = left[i]; 
                    i++; 
                } 
                else
                { 
                    a[k] = right[j]; 
                    j++; 
                } 
                k++; 
            } 
            // Collect remaining elements 
            while(i < left.length) 
            { 
                a[k] = left[i]; 
                i++; 
                k++; 
            } 
            while(j < right.length) 
            { 
                a[k] = right[j]; 
                j++; 
                k++; 
            } 
        } 
        
        return a;
    } 

    /**
             * Sorts an array of doubles using recursive implementation of Merge Sort.
             * This method is static, thus it can be called as SortComparison.sort(a)
             *
             * @param a: An unsorted array of doubles.
             * @return after the method returns, the array must be in ascending sorted order.
             */
    static double[] mergeSortRecursive (double a[]) {

    	if(a == null) 
        { 
            return null; 
        } 
    	
        int l = 0;
        int r = a.length-1;

        recursMergeSort(a,l,r);
        
        return a;
    }

    static void recursMergeSort(double a[] , int l, int r){
	    if (l < r)
	    {
	        int m = (l+r)/2;
	
	        recursMergeSort(a,l,m);
	        recursMergeSort(a,m+1,r);
	
	        merge(a, l, m, r);
	    }

    }

    public static void merge(double a[], int l, int m, int r) {

        int n1 = m - l + 1;
        int n2 = r - m;

        double left[] = new double[n1];
        double right[] = new double [n2];

        for (int i=0; i<n1; ++i)
        	left[i] = a[l + i];
        for (int j=0; j<n2; ++j)
        	right[j] = a[m + 1+ j];

        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2)
        {
            if (left[i] <= right[j])
            {
                a[k] = left[i];
                i++;
            }
            else
            {
                a[k] = right[j];
                j++;
            }
            k++;
        }
        while (i < n1)
        {
            a[k] = left[i];
            i++;
            k++;
        }
        while (j < n2)
        {
            a[k] = right[j];
            j++;
            k++;
        }
    }




    public static void main(String[] args) {

        
    }

}//end class
